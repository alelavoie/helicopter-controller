//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/AdvancedHelicopterController/InputActions/AHC_Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace alelavoie
{
    public partial class @AHC_InputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @AHC_InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""AHC_Controls"",
    ""maps"": [
        {
            ""name"": ""Flight"",
            ""id"": ""a0746126-19a8-4f51-b4f6-87165d9d3bf6"",
            ""actions"": [
                {
                    ""name"": ""Roll"",
                    ""type"": ""Value"",
                    ""id"": ""fd5e7b12-dd50-4908-a529-0ee46252a940"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""88469c23-c5d6-49cd-8d83-1f9144ae314c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""8c48a903-fb80-46af-bd7f-0ee39c837d7a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Collective"",
                    ""type"": ""Value"",
                    ""id"": ""e088ca78-aa29-49a3-9593-032e1355b1d6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ToggleEngine"",
                    ""type"": ""Button"",
                    ""id"": ""cb563c0b-bad9-468a-bb79-d76e5275b2a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActivateThrottling"",
                    ""type"": ""Button"",
                    ""id"": ""41307cef-a80f-4a10-b05e-6e4dac548af1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a2c30459-6826-4638-98ab-aca5fdf41468"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d6b5323d-8064-4165-acca-6614150c9214"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3322b966-ba9e-48f8-b559-315b14c2e93c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Axis"",
                    ""id"": ""7d2d377c-08e3-44bf-9a19-279844f49f16"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9a48a2dd-ecd1-4da3-a17c-2477b0919986"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d3d0357b-00d8-4207-995b-e44ec0379366"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Axis"",
                    ""id"": ""f62e85c5-8575-4131-8d4c-e36eb03f5cf8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5f157808-3ca1-420b-a7ce-1bb44ec5d587"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c4fb8e7c-c13a-4869-ae23-0140e4ce2b61"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""56acee63-641a-478e-a8b2-c00e99c36421"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Collective"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ae521e36-9237-40e1-9d15-c289191024df"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Collective"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6190593c-08b1-4e69-90c2-a6701739ded5"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Collective"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""78317a78-0681-4408-8c2d-5226f7df40e6"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleEngine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66276dc7-080b-4060-b2ba-1c38320fd11c"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateThrottling"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""beeb21c3-f708-4dcf-8608-05906fe6ab4e"",
            ""actions"": [
                {
                    ""name"": ""LookAroundKey"",
                    ""type"": ""Button"",
                    ""id"": ""55d14ade-68a0-4b2b-ba74-ca57d4242ab5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookAround"",
                    ""type"": ""PassThrough"",
                    ""id"": ""78d2a147-48da-4f02-97a3-595ee566e760"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4ee0b6a9-70e0-4cdf-98a5-6dc45fa60b5b"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAroundKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9abb85fa-7ec2-4115-897b-94512aa327cb"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Flight
            m_Flight = asset.FindActionMap("Flight", throwIfNotFound: true);
            m_Flight_Roll = m_Flight.FindAction("Roll", throwIfNotFound: true);
            m_Flight_Pitch = m_Flight.FindAction("Pitch", throwIfNotFound: true);
            m_Flight_Yaw = m_Flight.FindAction("Yaw", throwIfNotFound: true);
            m_Flight_Collective = m_Flight.FindAction("Collective", throwIfNotFound: true);
            m_Flight_ToggleEngine = m_Flight.FindAction("ToggleEngine", throwIfNotFound: true);
            m_Flight_ActivateThrottling = m_Flight.FindAction("ActivateThrottling", throwIfNotFound: true);
            // Camera
            m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
            m_Camera_LookAroundKey = m_Camera.FindAction("LookAroundKey", throwIfNotFound: true);
            m_Camera_LookAround = m_Camera.FindAction("LookAround", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Flight
        private readonly InputActionMap m_Flight;
        private IFlightActions m_FlightActionsCallbackInterface;
        private readonly InputAction m_Flight_Roll;
        private readonly InputAction m_Flight_Pitch;
        private readonly InputAction m_Flight_Yaw;
        private readonly InputAction m_Flight_Collective;
        private readonly InputAction m_Flight_ToggleEngine;
        private readonly InputAction m_Flight_ActivateThrottling;
        public struct FlightActions
        {
            private @AHC_InputActions m_Wrapper;
            public FlightActions(@AHC_InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Roll => m_Wrapper.m_Flight_Roll;
            public InputAction @Pitch => m_Wrapper.m_Flight_Pitch;
            public InputAction @Yaw => m_Wrapper.m_Flight_Yaw;
            public InputAction @Collective => m_Wrapper.m_Flight_Collective;
            public InputAction @ToggleEngine => m_Wrapper.m_Flight_ToggleEngine;
            public InputAction @ActivateThrottling => m_Wrapper.m_Flight_ActivateThrottling;
            public InputActionMap Get() { return m_Wrapper.m_Flight; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(FlightActions set) { return set.Get(); }
            public void SetCallbacks(IFlightActions instance)
            {
                if (m_Wrapper.m_FlightActionsCallbackInterface != null)
                {
                    @Roll.started -= m_Wrapper.m_FlightActionsCallbackInterface.OnRoll;
                    @Roll.performed -= m_Wrapper.m_FlightActionsCallbackInterface.OnRoll;
                    @Roll.canceled -= m_Wrapper.m_FlightActionsCallbackInterface.OnRoll;
                    @Pitch.started -= m_Wrapper.m_FlightActionsCallbackInterface.OnPitch;
                    @Pitch.performed -= m_Wrapper.m_FlightActionsCallbackInterface.OnPitch;
                    @Pitch.canceled -= m_Wrapper.m_FlightActionsCallbackInterface.OnPitch;
                    @Yaw.started -= m_Wrapper.m_FlightActionsCallbackInterface.OnYaw;
                    @Yaw.performed -= m_Wrapper.m_FlightActionsCallbackInterface.OnYaw;
                    @Yaw.canceled -= m_Wrapper.m_FlightActionsCallbackInterface.OnYaw;
                    @Collective.started -= m_Wrapper.m_FlightActionsCallbackInterface.OnCollective;
                    @Collective.performed -= m_Wrapper.m_FlightActionsCallbackInterface.OnCollective;
                    @Collective.canceled -= m_Wrapper.m_FlightActionsCallbackInterface.OnCollective;
                    @ToggleEngine.started -= m_Wrapper.m_FlightActionsCallbackInterface.OnToggleEngine;
                    @ToggleEngine.performed -= m_Wrapper.m_FlightActionsCallbackInterface.OnToggleEngine;
                    @ToggleEngine.canceled -= m_Wrapper.m_FlightActionsCallbackInterface.OnToggleEngine;
                    @ActivateThrottling.started -= m_Wrapper.m_FlightActionsCallbackInterface.OnActivateThrottling;
                    @ActivateThrottling.performed -= m_Wrapper.m_FlightActionsCallbackInterface.OnActivateThrottling;
                    @ActivateThrottling.canceled -= m_Wrapper.m_FlightActionsCallbackInterface.OnActivateThrottling;
                }
                m_Wrapper.m_FlightActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Roll.started += instance.OnRoll;
                    @Roll.performed += instance.OnRoll;
                    @Roll.canceled += instance.OnRoll;
                    @Pitch.started += instance.OnPitch;
                    @Pitch.performed += instance.OnPitch;
                    @Pitch.canceled += instance.OnPitch;
                    @Yaw.started += instance.OnYaw;
                    @Yaw.performed += instance.OnYaw;
                    @Yaw.canceled += instance.OnYaw;
                    @Collective.started += instance.OnCollective;
                    @Collective.performed += instance.OnCollective;
                    @Collective.canceled += instance.OnCollective;
                    @ToggleEngine.started += instance.OnToggleEngine;
                    @ToggleEngine.performed += instance.OnToggleEngine;
                    @ToggleEngine.canceled += instance.OnToggleEngine;
                    @ActivateThrottling.started += instance.OnActivateThrottling;
                    @ActivateThrottling.performed += instance.OnActivateThrottling;
                    @ActivateThrottling.canceled += instance.OnActivateThrottling;
                }
            }
        }
        public FlightActions @Flight => new FlightActions(this);

        // Camera
        private readonly InputActionMap m_Camera;
        private ICameraActions m_CameraActionsCallbackInterface;
        private readonly InputAction m_Camera_LookAroundKey;
        private readonly InputAction m_Camera_LookAround;
        public struct CameraActions
        {
            private @AHC_InputActions m_Wrapper;
            public CameraActions(@AHC_InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @LookAroundKey => m_Wrapper.m_Camera_LookAroundKey;
            public InputAction @LookAround => m_Wrapper.m_Camera_LookAround;
            public InputActionMap Get() { return m_Wrapper.m_Camera; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
            public void SetCallbacks(ICameraActions instance)
            {
                if (m_Wrapper.m_CameraActionsCallbackInterface != null)
                {
                    @LookAroundKey.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnLookAroundKey;
                    @LookAroundKey.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnLookAroundKey;
                    @LookAroundKey.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnLookAroundKey;
                    @LookAround.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnLookAround;
                    @LookAround.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnLookAround;
                    @LookAround.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnLookAround;
                }
                m_Wrapper.m_CameraActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @LookAroundKey.started += instance.OnLookAroundKey;
                    @LookAroundKey.performed += instance.OnLookAroundKey;
                    @LookAroundKey.canceled += instance.OnLookAroundKey;
                    @LookAround.started += instance.OnLookAround;
                    @LookAround.performed += instance.OnLookAround;
                    @LookAround.canceled += instance.OnLookAround;
                }
            }
        }
        public CameraActions @Camera => new CameraActions(this);
        public interface IFlightActions
        {
            void OnRoll(InputAction.CallbackContext context);
            void OnPitch(InputAction.CallbackContext context);
            void OnYaw(InputAction.CallbackContext context);
            void OnCollective(InputAction.CallbackContext context);
            void OnToggleEngine(InputAction.CallbackContext context);
            void OnActivateThrottling(InputAction.CallbackContext context);
        }
        public interface ICameraActions
        {
            void OnLookAroundKey(InputAction.CallbackContext context);
            void OnLookAround(InputAction.CallbackContext context);
        }
    }
}
